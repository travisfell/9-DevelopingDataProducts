q2PredRF
class(q2PredRF)
confustionMatrix(testing$diagnosis, q2PredRF)
confusionMatrix(testing$diagnosis, q2PredRF)
confusionMatrix(testing$diagnosis, q2PredRF)$Accuracy
?confustionMatrix
?confusionMatrix
confusionMatrix(testing$diagnosis, q2PredRF)$overall
confusionMatrix(testing$diagnosis, q2PredRF)$table
confusionMatrix(testing$diagnosis, q2PredRF)$positive
confusionMatrix(testing$diagnosis, q2PredRF)$byClass
confusionMatrix(testing$diagnosis, q2PredRF)$overall
confusionMatrix(testing$diagnosis, q2PredRF)$overall$Accuracy
confusionMatrix(testing$diagnosis, q2PredRF)$overall
confusionMatrix(testing$diagnosis, q2PredGBM)$overall
confusionMatrix(testing$diagnosis, q2PredLDA)$overall
q2predDF <- data.frame(q2PredRF, q2PredGBM, q2LDA, diagnosis = training$diagnosis)
q2predDF <- data.frame(q2PredRF, q2PredGBM, q2PredLDA, diagnosis = training$diagnosis)
q2rf <- train(diagnosis ~ ., data = training, method = "rf")
save(q2rf, file = "q2rf.rda")
q2PredRF <- predict(q2rf, testing)
q2predDF <- data.frame(q2PredRF, q2PredGBM, q2PredLDA, diagnosis = training$diagnosis)
q2predDF <- data.frame(q2PredRF, q2PredGBM, q2PredLDA, diagnosis = testing$diagnosis)
?train
q2combMod <- train(diagnosis ~ ., method = "gam", data = q2predDF)
confusionMatrix(testing$diagnosis, q2combMod)$overall
confusionMatrix(testing$diagnosis, q2combMod)
q2combMod <- train(diagnosis ~ ., method = "rf", data = q2predDF)
confusionMatrix(testing$diagnosis, q2combMod)
?trControl
?train
trControl = trainControl(method="cv"), number = 3)
trControl = trainControl(method="cv"), number = 3)
trControl = trainControl(method="cv"), number = 3)
q2rf <- train(diagnosis ~ .,  method = "rf", data = training, trControl = trainControl(method="cv"), number = 3)
q2PredRF <- predict(q2rf, testing)
confusionMatrix(testing$diagnosis, q2PredRF)$overall
q2predDF <- data.frame(q2PredRF, q2PredGBM, q2PredLDA, diagnosis = testing$diagnosis)
q2combMod <- train(diagnosis ~ ., method = "rf", data = q2predDF)
confusionMatrix(testing$diagnosis, q2combMod)
View(q2predDF)
q2combMod <- train(diagnosis ~ ., method = "rf", data = q2predDF)
combCor <- findCorrelation((cor(q2PredDF[:1:3], cutoff=.9, verbose = FALSE)))
combCor <- findCorrelation((cor(q2PredDF[,1:3], cutoff=.9, verbose = FALSE)))
combCor <- findCorrelation((cor(q2PredDF[,1:3]), cutoff=.9, verbose = FALSE)))
combCor <- findCorrelation(cor(q2PredDF[,1:3]), cutoff=.9, verbose = FALSE)))
combCor <- findCorrelation(cor(q2PredDF[,1:3]), cutoff=.9, verbose = FALSE)
q2predDF <- data.frame(q2PredRF, q2PredGBM, q2PredLDA, diagnosis = testing$diagnosis)
combCor <- findCorrelation(cor(q2PredDF[,1:3]), cutoff=.9, verbose = FALSE)
combCor <- findCorrelation(cor(q2predDF[,1:3]), cutoff=.9, verbose = FALSE)
q2combMod <- train(diagnosis ~ ., method = "rf", data = q2predDF)
confusionMatrix(testing$diagnosis, q2combMod)
q2combMod
q2predComb <- predict(q2combMod, testing)
confusionMatrix(testing$diagnosis, q2PredComb)$overall
confusionMatrix(testing$diagnosis, q2predComb)$overall
confusionMatrix(testing$diagnosis, q2PredRF)$overall
confusionMatrix(testing$diagnosis, q2PredGBM)$overall
confusionMatrix(testing$diagnosis, q2PredLDA)$overall
confusionMatrix(testing$diagnosis, q2predComb)$overall
q2predDF <- data.frame(q2PredRF, q2PredGBM, q2PredLDA, diagnosis = testing$diagnosis)
q2combMod <- train(diagnosis ~ ., method = "rf", data = q2predDF)
q2combMod <- train(diagnosis ~ ., method = "rf", data = q2predDF, trControl = trainControl(method="cv"), number = 3)
q2predComb <- predict(q2combMod, testing)
confusionMatrix(testing$diagnosis, q2predComb)$overall
confusionMatrix(testing$diagnosis, q2PredRF)$overall
confusionMatrix(testing$diagnosis, q2PredGBM)$overall
confusionMatrix(testing$diagnosis, q2PredLDA)$overall
confusionMatrix(testing$diagnosis, q2predComb)$overall
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
library(caret)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
q3mod <- train(CompressiveStrength ~ ., data = training, method = "lasso")
q3mod <- train(CompressiveStrength ~ ., data = training, method = "lasso")
summary(q3mod)
print(q3mod)
?plot.enet
?enet
q3pred <- predict(q3mod, testing)
enet(q3mod, q3pred, lambda = 0)
enet(q3mod, testing$CompressiveStrength, lambda = 0)
?lasso
install.packages("Rtools")
install.packages("Shiny")
install.packages("shiny")
?manipulate
library(manipulate)
install.packages("manipulate")
install.packages("manipulate")
library(manipulate)
?manipulate
install.packages("rCharts")
library(rCharts)
install.packages("installr")
library(installr)
updateR()
q()
library(shiny)
?renderText
?reactive
library(manipulate)
manipulate(plot(1:x, x = slider(1,100))
manipulate(plot(1:x), x = slider(1,100))
install.packages("rCharts")
require(devtools)
library(devtools)
install.packages("devtools")
library(devtools)
require(devtools)
install_github('ramnathv/rCharts')
install.packages("Rcpp")
install.packages("Rcpp")
install_github('ramnathv/rCharts')
require(devtools)
install.packages("Rcpp")
library(devtools)
library(Rcpp)
install_github('ramnathv/rCharts')
require(devtools)
install_github('rCharts', 'ramnathv')
install_github('ramnathv/rCharts')
library(RCurl)
install.packages("RCurl")
library(RCurl)
install_github('ramnathv/rCharts')
?dTable
?print
?dTable
library(rCharts)
?dTable
?print
library(rCharts)
library(airquality)
install.packages("airquality")
library(datasets)
?airquality
dTable(airquality, sPaginationType = "full_numbers")
?dTable
library(devtools)
install_github('slidify', 'ramnathv')
install_github('ramnathv/slidify')
library(slidify)
install.packages(("stringi"))
install.packages(("stringi"))
library(slidify)
install_github('ramnathv/slidify')
library(devtools)
install.packages("devtools")
install.packages("devtools")
library(devtools)
install_github('ramnathv/slidify')
library(stringi)
install.packages(("stringi"))
install_github('ramnathv/slidify')
install.packages("RPres")
library(dplyr)
library(ggplot2)
getwd()
setwd("C:/Users/fellt/Desktop/Crimson Member Analytics Cell/code/Rob_CustomSQL/DifferentInKind Analytics/Member Variation Analysis")
copd <- read.csv("copd_30dayreadmit.csv")
wtmu <- mean(byMember$WtAveReadmitPercentage)
byMember <- summarize(group_by(copd, membername),TotalEnc = sum(TotalCOPDEncounters), WtAveReadmitPercentage = weighted.mean(ReadmitPercentage, TotalCOPDEncounters))
byMember <- byMember[complete.cases(byMember$WtAveReadmitPercentage), ]
wtmu <- mean(byMember$WtAveReadmitPercentage)
x <- byMember$TotalEnc
y <- byMember$WtAveReadmitPercentage
plot(x, y, main = "WtAve Readmit % by Case Vol", ylab = "Percent", xlab = "Case Volume 10/2014 - 9/2015")
abline(h = wtmu, col = "red", lwd = 2)
summary(copd)
summary(copd$ReadmitPercentage)
readmits <- copd[complete.cases(copd$ReadmitPercentage), 7]
summary(readmits)
readmits
order(readmits)
readmits[order(readmits),]
readmits[order(readmits)]
View(copd)
View(byMember)
copd$SeverityCategory <- cut(AvgSeverity, breaks = 4, seq(1,4, by = 1))
copd$SeverityCategory <- cut(copd$AvgSeverity, breaks = 4, seq(1,4, by = 1))
View(copd)
copd$SeverityCategory <- cut(copd$AvgSeverity, breaks = 5, seq(0,4, by = 1))
View(copd)
copd$SeverityCategory <- cut(copd$AvgSeverity, lower = 0, upper = 4, by = 1)
?cut
copd$SeverityCategory <- cut(copd$AvgSeverity, breaks = 5, seq(0,4,by = 1))
View(copd)
copd$SeverityCategory <- cut(copd$AvgSeverity, breaks = 4, seq(0,4,by = 1))
copd$SeverityCategory <- cut(copd$AvgSeverity, breaks = 4, seq(1,4,by = 1))
View(copd)
copd$SeverityCategory <- cut(copd$AvgSeverity, breaks = 5, seq(0,4,by = 1))
View(copd)
copd$SeverityCategory <- cut(copd$AvgSeverity, breaks = 5, seq(0,4,by = .1))
copd$SeverityCategory <- cut(copd$AvgSeverity, breaks = 5, seq(0,4,by = 1), right = FALSE)
View(copd)
copd$SeverityCategory <- cut(copd$AvgSeverity, breaks = 5, seq(0,4,by = 1), right = FALSE, include.lowest = TRUE)
View(copd)
copd$SeverityCategory <- cut(copd$AvgSeverity, breaks = 5, seq(0,4,by = 1), include.lowest = TRUE)
View(copd)
copd$SeverityCategory <- cut(copd$AvgSeverity, breaks = 1, seq(1,4,by = 1), include.lowest = TRUE)
copd$SeverityCategory <- cut(copd$AvgSeverity, breaks = 4, seq(1,4,by = 1), include.lowest = TRUE)
copd$SeverityCategory <- cut(copd$AvgSeverity, breaks = 4, seq(1,4,by = 1), include.lowest = TRUE)
View(copd)
copd$SeverityCategory <- cut(copd$AvgSeverity, breaks = 4, seq(1,4,by = 1), right = TRUE, include.lowest = TRUE)
View(copd)
copd$SeverityCategory <- cut(copd$AvgSeverity, breaks = seq(1,4,by = 1))
View(copd)
copd$SeverityCategory <- cut(copd$AvgSeverity, breaks = seq(1,4,by = 1), include.lowest = TRUE)
View(copd)
?hist
hist(copd$AvgSeverity, breaks = 10)
hist(copd$AvgSeverity, breaks =20)
hist(copd$AvgSeverity, breaks = 4)
hist(copd$AvgSeverity, breaks = 20)
copd$SeverityCategory <- NULL
x <- byMember$TotalEnc
y <- byMember$WtAveReadmitPercentage
plot(x, y, main = "WtAve Readmit % by Case Vol", ylab = "Percent", xlab = "Case Volume 10/2014 - 9/2015")
abline(h = wtmu, col = "red", lwd = 2)
hist(readmits, breaks = 50,
main = "Histogram of COPD 30 day readmits",
ylab = "Members",
xlab = paste("% 10/2014 - 9/2015 readmits, wtavg = ", round(wtmu * 100, 1), "%")
)
abline(v = wtmu, col = "red", lwd = 2)
x <- byMember$TotalEnc
y <- byMember$WtAveReadmitPercentage
plot(x, y, main = "WtAve Readmit % by Case Vol", ylab = "Percent", xlab = "Case Volume 10/2014 - 9/2015")
abline(h = wtmu, col = "red", lwd = 2)
hist(copd$AvgSeverity, breaks = 20)
copd$SeverityCategory <- cut(copd$AvgSeverity, breaks = seq(1,4,by = 1), include.lowest = TRUE)
View(byMember)
View(copd)
copd$SeverityCategory <- cut(copd$AvgSeverity, breaks = seq(1,4,by = .5), include.lowest = TRUE)
View(copd)
?cut
copd$SeverityCategory <- cut(copd$AvgSeverity, breaks = seq(1,4,by = .5),
labels = c("1 to 1.5", "1.5 to 2", "2 to 2.5", "2.5 to 3", "3 to 3.5", "3.5 to 4"),
include.lowest = TRUE)
View(copd)
?plot
?points
byMember <- summarize(group_by(copd, membername),TotalEnc = sum(TotalCOPDEncounters),
WtAveReadmitPercentage = weighted.mean(ReadmitPercentage, TotalCOPDEncounters),
WtAveSeverity = weighted.mean(SeverityCategory, TotalCOPDEncounters))
byMember <- summarize(group_by(copd, membername),TotalEnc = sum(TotalCOPDEncounters),
WtAveReadmitPercentage = weighted.mean(ReadmitPercentage, TotalCOPDEncounters),
WtAveSeverity = weighted.mean(AveSeverity, TotalCOPDEncounters))
WtAveSeverity = weighted.mean(AvgSeverity, TotalCOPDEncounters))
byMember <- summarize(group_by(copd, membername),TotalEnc = sum(TotalCOPDEncounters),
WtAveReadmitPercentage = weighted.mean(ReadmitPercentage, TotalCOPDEncounters),
WtAveSeverity = weighted.mean(AvgSeverity, TotalCOPDEncounters))
byMember <- byMember[complete.cases(byMember$WtAveReadmitPercentage), ]
wtmu <- mean(byMember$WtAveReadmitPercentage)
z <- byMember$SeverityCategory
plot(x, y, main = "WtAve Readmit % by Case Vol",
ylab = "Percent", xlab = "Case Volume 10/2014 - 9/2015")
abline(h = wtmu, col = "red", lwd = 2)
library(ggplot2)
gwt <- ggplot(byMember, aes(x, y), colour = z)
gwt <- gwt + geom_point(aes(colour = z))
#gwt <- gwt + geom_smooth(method = 'lm')
gwt <- gwt + ylab("Readmit %")
gwt <- gwt + xlab("Case Volume")
gwt <- gwt + ggtitle("WtAve Readmit % by Case Vol")
gwt
z <- byMember$WtAveSeverity
gwt <- ggplot(byMember, aes(x, y), colour = z)
gwt <- gwt + geom_point(aes(colour = z))
#gwt <- gwt + geom_smooth(method = 'lm')
gwt <- gwt + ylab("Readmit %")
gwt <- gwt + xlab("Case Volume")
gwt <- gwt + ggtitle("WtAve Readmit % by Case Vol")
gwt
?aes
?geom_point
gwt <- ggplot(byMember, aes(x, y), colour = z)
gwt <- gwt + geom_point(aes(colour = scale_color_brewer(z)))
#gwt <- gwt + geom_smooth(method = 'lm')
gwt <- gwt + ylab("Readmit %")
gwt <- gwt + xlab("Case Volume")
gwt <- gwt + ggtitle("WtAve Readmit % by Case Vol")
gwt
?scale_color_brewer
gwt <- ggplot(byMember, aes(x, y), colour = z)
gwt <- gwt + geom_point(aes(colour = scale_color_brewer()), date = z)
#gwt <- gwt + geom_smooth(method = 'lm')
gwt <- gwt + ylab("Readmit %")
gwt <- gwt + xlab("Case Volume")
gwt <- gwt + ggtitle("WtAve Readmit % by Case Vol")
gwt
?geom_point
?aes_string
?brewer.pal
install.packages("brewer")
?scale_color_discrete
View(byMember)
byMember <- summarize(group_by(copd, membername),TotalEnc = sum(TotalCOPDEncounters),
WtAveReadmitPercentage = weighted.mean(ReadmitPercentage, TotalCOPDEncounters),
WtAveSeverity = weighted.mean(AvgSeverity, TotalCOPDEncounters))
byMember$SeverityCategory <- cut(byMember$WtAvgSeverity, breaks = seq(1,4,by = .5),
labels = c("1 to 1.5", "1.5 to 2", "2 to 2.5", "2.5 to 3", "3 to 3.5", "3.5 to 4"),
include.lowest = TRUE)
byMember <- byMember[complete.cases(byMember$WtAveReadmitPercentage), ]
byMember <- summarize(group_by(copd, membername),TotalEnc = sum(TotalCOPDEncounters),
WtAveReadmitPercentage = weighted.mean(ReadmitPercentage, TotalCOPDEncounters),
WtAveSeverity = weighted.mean(AvgSeverity, TotalCOPDEncounters))
byMember$SeverityCategory <- cut(byMember$WtAveSeverity, breaks = seq(1,4,by = .5),
labels = c("1 to 1.5", "1.5 to 2", "2 to 2.5", "2.5 to 3", "3 to 3.5", "3.5 to 4"),
include.lowest = TRUE)
byMember <- byMember[complete.cases(byMember$WtAveReadmitPercentage), ]
wtmu <- mean(byMember$WtAveReadmitPercentage)
View(byMember)
z <- byMember$SeverityCategory
gwt <- ggplot(byMember, aes(x, y), colour = z)
#gwt <- gwt + geom_point(aes(color = z))
gwt <- gwt + geom_point()
gwt <- gwt + scale_colour_discrete(drop=TRUE, limits = levels(z))
#gwt <- gwt + geom_smooth(method = 'lm')
gwt <- gwt + ylab("Readmit %")
gwt <- gwt + xlab("Case Volume")
gwt <- gwt + ggtitle("WtAve Readmit % by Case Vol")
gwt
gwt <- ggplot(byMember, aes(x, y), colour = z)
gwt <- gwt + geom_point(aes(color = z))
#gwt <- gwt + geom_point()
#gwt <- gwt + scale_colour_discrete(drop=TRUE, limits = levels(z))
#gwt <- gwt + geom_smooth(method = 'lm')
gwt <- gwt + ylab("Readmit %")
gwt <- gwt + xlab("Case Volume")
gwt <- gwt + ggtitle("WtAve Readmit % by Case Vol")
gwt
gwt <- ggplot(byMember, aes(x, y))
gwt <- gwt + geom_point(aes(color = z))
#gwt <- gwt + geom_point()
#gwt <- gwt + scale_colour_discrete(drop=TRUE, limits = levels(z))
#gwt <- gwt + geom_smooth(method = 'lm')
gwt <- gwt + ylab("Readmit %")
gwt <- gwt + xlab("Case Volume")
gwt <- gwt + ggtitle("WtAve Readmit % by Case Vol")
gwt
?scale_color_discrete
# plot copd readmit % by case volume and severity category
gwt <- ggplot(byMember, aes(x, y))
# gwt <- gwt + geom_point(aes(color = z))
gwt <- gwt + geom_point()
gwt <- gwt + scale_colour_discrete(drop=TRUE, limits = levels(z))
#gwt <- gwt + geom_smooth(method = 'lm')
gwt <- gwt + ylab("Readmit %")
gwt <- gwt + xlab("Case Volume")
gwt <- gwt + ggtitle("WtAve Readmit % by Case Vol")
gwt
gwt <- ggplot(byMember, aes(x, y))
gwt <- gwt + geom_point(aes(color = z))
#gwt <- gwt + geom_point()
#gwt <- gwt + scale_colour_discrete(drop=TRUE, limits = levels(z))
#gwt <- gwt + geom_smooth(method = 'lm')
gwt <- gwt + ylab("Readmit %")
gwt <- gwt + xlab("Case Volume")
gwt <- gwt + ggtitle("WtAve Readmit % by Case Vol")
gwt
?geom_smooth
?geom_line
gwt <- ggplot(byMember, aes(x, y))
gwt <- gwt + geom_point(aes(color = z))
gwt <- gwt + geom_line(data = wtmu)
#gwt <- gwt + geom_point()
#gwt <- gwt + scale_colour_discrete(drop=TRUE, limits = levels(z))
#gwt <- gwt + geom_smooth(method = 'lm')
gwt <- gwt + ylab("Readmit %")
gwt <- gwt + xlab("Case Volume")
gwt <- gwt + ggtitle("WtAve Readmit % by Case Vol")
gwt
gwt <- ggplot(byMember, aes(x, y))
gwt <- gwt + geom_point(aes(color = z))
#gwt <- gwt + geom_point()
#gwt <- gwt + scale_colour_discrete(drop=TRUE, limits = levels(z))
gwt <- gwt + geom_smooth(method = 'mean')
gwt <- gwt + ylab("Readmit %")
gwt <- gwt + xlab("Case Volume")
gwt <- gwt + ggtitle("WtAve Readmit % by Case Vol")
gwt
gwt <- ggplot(byMember, aes(x, y))
gwt <- gwt + geom_point(aes(color = z))
gwt<- gwt + geom_hline(data = wtmu)
#gwt <- gwt + geom_point()
#gwt <- gwt + scale_colour_discrete(drop=TRUE, limits = levels(z))
#gwt <- gwt + geom_smooth(method = 'mean')
gwt <- gwt + ylab("Readmit %")
gwt <- gwt + xlab("Case Volume")
gwt <- gwt + ggtitle("WtAve Readmit % by Case Vol")
gwt
?geom_hline
gwt <- ggplot(byMember, aes(x, y))
gwt <- gwt + geom_point(aes(color = z))
gwt<- gwt + geom_hline(yintercept = wtmu)
#gwt <- gwt + geom_point()
#gwt <- gwt + scale_colour_discrete(drop=TRUE, limits = levels(z))
#gwt <- gwt + geom_smooth(method = 'mean')
gwt <- gwt + ylab("Readmit %")
gwt <- gwt + xlab("Case Volume")
gwt <- gwt + ggtitle("WtAve Readmit % by Case Vol")
gwt
gwt <- ggplot(byMember, aes(x, y))
gwt <- gwt + geom_point(aes(color = z))
gwt<- gwt + geom_hline(yintercept = wtmu, show.guide = TRUE)
#gwt <- gwt + geom_point()
#gwt <- gwt + scale_colour_discrete(drop=TRUE, limits = levels(z))
#gwt <- gwt + geom_smooth(method = 'mean')
gwt <- gwt + ylab("Readmit %")
gwt <- gwt + xlab("Case Volume")
gwt <- gwt + ggtitle("WtAve Readmit % by Case Vol")
gwt
gwt <- ggplot(byMember, aes(x, y))
gwt <- gwt + geom_point(aes(color = z))
gwt<- gwt + geom_hline(yintercept = wtmu)
#gwt <- gwt + geom_point()
#gwt <- gwt + scale_colour_discrete(drop=TRUE, limits = levels(z))
#gwt <- gwt + geom_smooth(method = 'mean')
gwt <- gwt + ylab("Readmit %")
gwt <- gwt + xlab("Case Volume")
gwt <- gwt + ggtitle("WtAve Readmit % by Case Vol")
gwt
?labs
library(datasets)
p <- qplot(mpg, wt, data = mtcars)
p + labs(title = "New plot title")
p + labs(x = "New x label")
p + xlab("New x label")
p + ylab("New y label")
p + ggtitle("New plot title")
p
library(datasets)
data(mtcars)
p <- qplot(mpg, wt, data = mtcars)
p + labs(title = "New plot title")
p + labs(x = "New x label")
p + xlab("New x label")
p + ylab("New y label")
p + ggtitle("New plot title")
p
gwt <- ggplot(byMember, aes(x, y))
gwt <- gwt + geom_point(aes(color = z))
gwt<- gwt + geom_hline(yintercept = wtmu)
#gwt <- gwt + geom_point()
#gwt <- gwt + scale_colour_discrete(drop=TRUE, limits = levels(z))
#gwt <- gwt + geom_smooth(method = 'mean')
gwt <- gwt + ylab("Readmit %")
gwt <- gwt + xlab("Case Volume")
gwt <- gwt + ggtitle("WtAve Readmit % by Case Vol")
gwt <- gwt + labs(aesthetic = "Severity Categories")
gwt
gwt <- ggplot(byMember, aes(x, y))
gwt <- gwt + geom_point(aes(color = z))
gwt<- gwt + geom_hline(yintercept = wtmu)
#gwt <- gwt + geom_point()
#gwt <- gwt + scale_colour_discrete(drop=TRUE, limits = levels(z))
#gwt <- gwt + geom_smooth(method = 'mean')
gwt <- gwt + ylab("Readmit %")
gwt <- gwt + xlab("Case Volume")
gwt <- gwt + ggtitle("WtAve Readmit % by Case Vol")
gwt <- gwt + labs(title = "Severity Categories")
gwt
gwt <- ggplot(byMember, aes(x, y))
gwt <- gwt + geom_point(aes(color = z))
gwt<- gwt + geom_hline(yintercept = wtmu)
#gwt <- gwt + geom_point()
gwt <- gwt + scale_colour_discrete("Severity Category", limits = levels(z))
#gwt <- gwt + geom_smooth(method = 'mean')
gwt <- gwt + ylab("Readmit %")
gwt <- gwt + xlab("Case Volume")
gwt <- gwt + ggtitle("WtAve Readmit % by Case Vol")
gwt
gwt <- ggplot(byMember, aes(x, y))
gwt <- gwt + geom_point(aes(color = z))
gwt<- gwt + geom_hline(yintercept = wtmu)
#gwt <- gwt + geom_point()
gwt <- gwt + scale_colour_discrete("Severity Category", limits = levels(z))
#gwt <- gwt + geom_smooth(method = 'mean')
gwt <- gwt + ylab("Readmit %")
gwt <- gwt + xlab("10/2014 - 9/2015 Case Volume")
gwt <- gwt + ggtitle("WtAve Readmit % by Case Vol")
gwt
runApp()
setwd("C:/Users/fellt/Desktop/Data Science/Coursera Data Science Specialization/09 - Building Data Products/9-DevelopingDataProducts/final project")
runApp()
library(shiny)
runApp()
runApp()
deployApp(name = MPGPred)
library(shiny)
deployApp(name = MPGPred)
getwd
getwd()
deployApp()
library(devtools)
library(shinyapps)
deployApp()
install.packages("Rpres")
