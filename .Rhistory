varImp(q5fit)
?step
# question 1
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
?createDataPartition
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
trainingil <- training[,58:69]
trainingil <- training[,58:69]
q3pca <- preProcess(trainingil, method="pca", thresh = .9)
q3pca
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
<- cbind(training[,1],training[,58:69])
q4test <-  cbind(testing[,1],testing[,58:69])
colnames(q4train)[1] <- "diagnosis"
colnames(q4test)[1] <- "diagnosis"
q4train <- cbind(training[,1],training[,58:69])
q4test <-  cbind(testing[,1],testing[,58:69])
colnames(q4train)[1] <- "diagnosis"
colnames(q4test)[1] <- "diagnosis"
hist(q4train[,14])
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
q4train <- cbind(training[,1],training[,58:69])
q4test <-  cbind(testing[,1],testing[,58:69])
colnames(q4train)[1] <- "diagnosis"
colnames(q4test)[1] <- "diagnosis"
hist(q4train[,13])
View(q4train)
featurePlot(x=q4train[,2:13], y=q4train$diagnosis, plot="pairs")
q4fit_nopca <- train(q4train$diagnosis ~ ., method = "glm", data = q4train)
confusionMatrix(q4test$diagnosis, predict(q4fit_nopca, q4test))
q4fit_pca <- train(q4train$diagnosis ~ ., method = "glm", preProcess = "pca", data = q4train)
confusionMatrix(q4test$diagnosis, predict(q4fit_pca, q4test))
preProc <- preProcess(training[,58:69], method = "pca", thresh = .8)
trainPC <- predict(preProc, training[,58:69])
modelFit <- train(q4train$diagnosis ~ ., method = "glm", data = trainPC)
testPC <- predict(preProc, testing[,58:69])
confusionMatrix(q4test$diagnosis, predict(modelFit, testPC))
confusionMatrix(q4test$diagnosis, predict(q4fit_nopca, q4test))
confusionMatrix(q4test$diagnosis, predict(q4fit_pca, q4test))
confusionMatrix(q4test$diagnosis, predict(modelFit, testPC))
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
hist(mixtures$Superplasticizer)
hist(log(mixtures$Superplasticizer))
plot(mixtures$Superplasticizer)
mean(mixtures$Superplasticizer)
sd(mixtures$Superplasticizer)
mean(log(mixtures$Superplasticizer)) # this yields -Inf, meaning an negative infinite number
sd(log(mixtures$Superplasticizer))  # this yields NaN, meaning not a number
log(mixtures$Superplasticizer)
summary(mixtures$Superplasticizer)
str(mixtures$Superplasticizer)
inTrain
hist(mixtures$Superplasticizer)
summary(mixtures$Superplasticizer)
str(mixtures$Superplasticizer)
inTrain
View(mixtures)
log(mixtures$Superplasticizer)
library(caret)
library(AppliedPredictiveModeling)
library(ElemStatLearn)
library(pgmm)
library(rpart)
library(rattle)
data(segmentationOriginal)
View(segmentationOriginal)
inTrain <- createDataPartition(y=segmentationOriginal$Case)
training <- subset(segmentationOriginal, Case == 'Train')
testing <- subset(segmentationOriginal, Case == 'Test')
set.seed(125)
modFit <- train(Class ~., method = "rpart", data = training)
print(modFit$finalModel)
plot(modFit$finalModel, uniform=TRUE, main="classification tree")
text (modFit$finalModel, use.n=TRUE, all=TRUE, cex=.8)
fancyRpartPlot(modFit$finalModel)
print(modFit$finalModel)
library(pgmm)
data(olive)
olive = olive[,-1]
inTrain <- createDataPartition(y = olive$Area, p = .7, list = FALSE)
training <- olive[inTrain,]
testing <- olive[-inTrain,]
newdata = as.data.frame(t(colMeans(olive)))
modFit <- train(Area ~., method = "rpart", data=training)
print(modFit$finalModel)
predict(modFit, newdata = newdata)
View(olive)
?olive
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
q4fit <- glm(chd ~ age + alcohol + obesity + tobacco + typea + ldl, data = trainSA)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(trainSA, q4fit)
missClass(trainSA, q4fit)
q4fit <- glm(chd ~ age + alcohol + obesity + tobacco + typea + ldl, data = trainSA, family = "binomial")
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(trainSA, q4fit)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
q4fit <- glm(chd ~ age + alcohol + obesity + tobacco + typea + ldl, data = trainSA, family = "binomial")
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(trainSA, q4fit)
View(trainSA)
q4fit
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(trainSA, q4fit)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
set.seed(33833)
vowel.test$y <- as.factor(vowel.test$y)
vowel.train$y <- as.factor(vowel.train$y)
q5fit <- train(y~., data = vowel.train, method = "rf", prox=TRUE)
varImp(q5fit)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
q4fit <- glm(chd ~ age + alcohol + obesity + tobacco + typea + ldl, data = trainSA, family = "binomial")
#missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(trainSA, q4fit)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
q4fit <- glm(chd ~ age + alcohol + obesity + tobacco + typea + ldl, data = trainSA, family = "binomial")
#missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(trainSA, q4fit)
q4fit <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, data = trainSA, family = "binomial"))
#q4fit <- glm(chd ~ age + alcohol + obesity + tobacco + typea + ldl, data = trainSA, method = "glm", family = "binomial")
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(trainSA, q4fit)
View(testSA)
q4fit
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
train
View(SAheart)
View(segmentationOriginal)
View(segmentationOriginal)
missClass
q4fit$FinalModel
q4fit <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, data = trainSA, family = "binomial"))
q4fit <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, data = trainSA, family = "binomial")
library(caret)
q4fit <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, data = trainSA, family = "binomial")
q4fit <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, data = trainSA, family = "binomial")
q4fit <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, data = trainSA, method = "glm", family = "binomial")
q4fit <- glm(chd ~ age + alcohol + obesity + tobacco + typea + ldl, data = trainSA, method = "glm", family = "binomial")
q4fit <- glm(chd ~ age + alcohol + obesity + tobacco + typea + ldl, data = trainSA, family = "binomial")
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(trainSA, q4fit)
summary(q4fit)
length(trainSA)
sum(((q4fit > .5) * 1) != trainSA)
sum(((q4fit > .5) * 1) != trainSA)
/length(trainSA)
sum(((q4fit > .5) * 1) != trainSA)/length(trainSA)
trainSA
train
(q4fit > .5) * 1) != trainSA
(q4fit > .5) * 1) != trainSA)
((q4fit > .5) * 1) != trainSA)
(((q4fit > .5) * 1) != trainSA)
(q4fit > .5)
predTrain <- predict(q4Fit, trainSA)
predTrain <- predict(q4fit, trainSA)
missClass(trainSA, predTrain)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(trainSA, predTrain)
predTest <- predict(q4fit, testSA)
missClass(trainSA, predTest)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
head(vowel.train)
vowel.train$y <-as.factor(vowel.train$y)
vowel.test$y <-as.factor(vowel.test$y)
set.seed(33833)
library(caret)
library(AppliedPredictiveModeling)
library(ElemStatLearn)
library(pgmm)
library(rpart)
library(gbm)
library(lubridate)
install.packages("lubridate")
library(lubridate)
library(forecast)
install.packages("forecast")
library(forecast)
library(e1071)
?train
names(getModelInfo())
q1rf<- train(y~., data = vowel.train, method = "rf")
save(q1rf, file = "q1rf.rda")
q1PredRF <- predict(q1rf, vowel.test)
q1PredRF
print(PredRF)
print(q1PredRF)
confusionMatrix(vowel.test$y, q1PredRF)
confusionMatrix(vowel.test$y, q1PredRF)$Accuracy
confusionMatrix(vowel.test$y, q1PredRF)
save(q1rf, file = "q1rf.rda")
q1gbm<- train(y~., data = vowel.train, method = "gbm")
q1gbm<- train(y~., data = vowel.train, method = "gbm", verbose = FALSE)
save(q1gbm, file = "q1gbm.rda")
q1PredGBM <- predict(q1gbm, vowel.test)
confusionMatrix(vowel.test$y, q1PredGBM)
confusionMatrix(vowel.test$y, q1PredRF)
confusionMatrix(vowel.test$y, q1PredGBM)
confusionMatrix(vowel.test$y, q1PredGBM)
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
View(adData)
q2rf <- train(diagnosis ~ ., data = training, method = "rf")
q2rf <- train(diagnosis ~ ., data = training, method = "rf")
save(q2rf, file = "q2rf.rda")
q2gmb <- train(diagnosis ~ ., data = training, method = "gbm")
q2gmb <- train(diagnosis ~ ., data = training, method = "gbm", verbose = FALSE)
save(q2gbm, file = "q2gbm.rda")
q2gbm <- q2gmb
rm(q2gmb)
save(q2gbm, file = "q2gbm.rda")
q2lda <- train(diagnosis ~ ., data = training, method = "lda")
save(q2lda, file = "q2lda.rda")
q2PredRF <- predict(q2rf, testing)
q2PredGBM <- predict(q2gbm, testing)
q2PredLDA <- predict(q2lda, testing)
q2PredRF
class(q2PredRF)
confustionMatrix(testing$diagnosis, q2PredRF)
confusionMatrix(testing$diagnosis, q2PredRF)
confusionMatrix(testing$diagnosis, q2PredRF)$Accuracy
?confustionMatrix
?confusionMatrix
confusionMatrix(testing$diagnosis, q2PredRF)$overall
confusionMatrix(testing$diagnosis, q2PredRF)$table
confusionMatrix(testing$diagnosis, q2PredRF)$positive
confusionMatrix(testing$diagnosis, q2PredRF)$byClass
confusionMatrix(testing$diagnosis, q2PredRF)$overall
confusionMatrix(testing$diagnosis, q2PredRF)$overall$Accuracy
confusionMatrix(testing$diagnosis, q2PredRF)$overall
confusionMatrix(testing$diagnosis, q2PredGBM)$overall
confusionMatrix(testing$diagnosis, q2PredLDA)$overall
q2predDF <- data.frame(q2PredRF, q2PredGBM, q2LDA, diagnosis = training$diagnosis)
q2predDF <- data.frame(q2PredRF, q2PredGBM, q2PredLDA, diagnosis = training$diagnosis)
q2rf <- train(diagnosis ~ ., data = training, method = "rf")
save(q2rf, file = "q2rf.rda")
q2PredRF <- predict(q2rf, testing)
q2predDF <- data.frame(q2PredRF, q2PredGBM, q2PredLDA, diagnosis = training$diagnosis)
q2predDF <- data.frame(q2PredRF, q2PredGBM, q2PredLDA, diagnosis = testing$diagnosis)
?train
q2combMod <- train(diagnosis ~ ., method = "gam", data = q2predDF)
confusionMatrix(testing$diagnosis, q2combMod)$overall
confusionMatrix(testing$diagnosis, q2combMod)
q2combMod <- train(diagnosis ~ ., method = "rf", data = q2predDF)
confusionMatrix(testing$diagnosis, q2combMod)
?trControl
?train
trControl = trainControl(method="cv"), number = 3)
trControl = trainControl(method="cv"), number = 3)
trControl = trainControl(method="cv"), number = 3)
q2rf <- train(diagnosis ~ .,  method = "rf", data = training, trControl = trainControl(method="cv"), number = 3)
q2PredRF <- predict(q2rf, testing)
confusionMatrix(testing$diagnosis, q2PredRF)$overall
q2predDF <- data.frame(q2PredRF, q2PredGBM, q2PredLDA, diagnosis = testing$diagnosis)
q2combMod <- train(diagnosis ~ ., method = "rf", data = q2predDF)
confusionMatrix(testing$diagnosis, q2combMod)
View(q2predDF)
q2combMod <- train(diagnosis ~ ., method = "rf", data = q2predDF)
combCor <- findCorrelation((cor(q2PredDF[:1:3], cutoff=.9, verbose = FALSE)))
combCor <- findCorrelation((cor(q2PredDF[,1:3], cutoff=.9, verbose = FALSE)))
combCor <- findCorrelation((cor(q2PredDF[,1:3]), cutoff=.9, verbose = FALSE)))
combCor <- findCorrelation(cor(q2PredDF[,1:3]), cutoff=.9, verbose = FALSE)))
combCor <- findCorrelation(cor(q2PredDF[,1:3]), cutoff=.9, verbose = FALSE)
q2predDF <- data.frame(q2PredRF, q2PredGBM, q2PredLDA, diagnosis = testing$diagnosis)
combCor <- findCorrelation(cor(q2PredDF[,1:3]), cutoff=.9, verbose = FALSE)
combCor <- findCorrelation(cor(q2predDF[,1:3]), cutoff=.9, verbose = FALSE)
q2combMod <- train(diagnosis ~ ., method = "rf", data = q2predDF)
confusionMatrix(testing$diagnosis, q2combMod)
q2combMod
q2predComb <- predict(q2combMod, testing)
confusionMatrix(testing$diagnosis, q2PredComb)$overall
confusionMatrix(testing$diagnosis, q2predComb)$overall
confusionMatrix(testing$diagnosis, q2PredRF)$overall
confusionMatrix(testing$diagnosis, q2PredGBM)$overall
confusionMatrix(testing$diagnosis, q2PredLDA)$overall
confusionMatrix(testing$diagnosis, q2predComb)$overall
q2predDF <- data.frame(q2PredRF, q2PredGBM, q2PredLDA, diagnosis = testing$diagnosis)
q2combMod <- train(diagnosis ~ ., method = "rf", data = q2predDF)
q2combMod <- train(diagnosis ~ ., method = "rf", data = q2predDF, trControl = trainControl(method="cv"), number = 3)
q2predComb <- predict(q2combMod, testing)
confusionMatrix(testing$diagnosis, q2predComb)$overall
confusionMatrix(testing$diagnosis, q2PredRF)$overall
confusionMatrix(testing$diagnosis, q2PredGBM)$overall
confusionMatrix(testing$diagnosis, q2PredLDA)$overall
confusionMatrix(testing$diagnosis, q2predComb)$overall
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
library(caret)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
q3mod <- train(CompressiveStrength ~ ., data = training, method = "lasso")
q3mod <- train(CompressiveStrength ~ ., data = training, method = "lasso")
summary(q3mod)
print(q3mod)
?plot.enet
?enet
q3pred <- predict(q3mod, testing)
enet(q3mod, q3pred, lambda = 0)
enet(q3mod, testing$CompressiveStrength, lambda = 0)
?lasso
install.packages("Rtools")
install.packages("Shiny")
install.packages("shiny")
?manipulate
library(manipulate)
install.packages("manipulate")
install.packages("manipulate")
library(manipulate)
?manipulate
install.packages("rCharts")
library(rCharts)
install.packages("installr")
library(installr)
updateR()
q()
library(shiny)
?renderText
?reactive
library(manipulate)
manipulate(plot(1:x, x = slider(1,100))
manipulate(plot(1:x), x = slider(1,100))
install.packages("rCharts")
require(devtools)
library(devtools)
install.packages("devtools")
library(devtools)
require(devtools)
install_github('ramnathv/rCharts')
install.packages("Rcpp")
install.packages("Rcpp")
install_github('ramnathv/rCharts')
require(devtools)
install.packages("Rcpp")
library(devtools)
library(Rcpp)
install_github('ramnathv/rCharts')
require(devtools)
install_github('rCharts', 'ramnathv')
install_github('ramnathv/rCharts')
library(RCurl)
install.packages("RCurl")
library(RCurl)
install_github('ramnathv/rCharts')
?dTable
?print
?dTable
library(rCharts)
?dTable
?print
library(rCharts)
library(airquality)
install.packages("airquality")
library(datasets)
?airquality
dTable(airquality, sPaginationType = "full_numbers")
?dTable
library(devtools)
install_github('slidify', 'ramnathv')
install_github('ramnathv/slidify')
library(slidify)
install.packages(("stringi"))
install.packages(("stringi"))
library(slidify)
install_github('ramnathv/slidify')
library(devtools)
install.packages("devtools")
install.packages("devtools")
library(devtools)
install_github('ramnathv/slidify')
library(stringi)
install.packages(("stringi"))
install_github('ramnathv/slidify')
install.packages("RPres")
getwd()
setwd("C:\Users\fellt\Desktop\Data Science\Coursera Data Science Specialization\09 - Building Data Products\9-DevelopingDataProducts")
setwd("C:/Users/fellt/Desktop/Data Science/Coursera Data Science Specialization/09 - Building Data Products/9-DevelopingDataProducts")
runApp()
library(shiny)
runApp()
getwd()
setwd("C:/Users/fellt/Desktop/Data Science/Coursera Data Science Specialization/09 - Building Data Products/9-DevelopingDataProducts/final project")
runApp()
runApp()
class(mpgpred)
shiny::runApp()
?shiny
runApp()
?shiny
runApp()
shiny::runApp()
mpgmodel <- lm(mpg ~ am + wt, mtcars)
trans <- as.numeric(trans)
mpgpred <- predict(mpgmodel, data.frame(am = trans, wt = wt), interval = "prediction")
mpgpred
trans <- 1 # 1 = manual, 0 = auto
wt <- 3.5 # in tons
trans <- as.numeric(trans)
mpgpred <- predict(mpgmodel, data.frame(am = trans, wt = wt), interval = "prediction")
mpgpred
class(mpgpred)
library(caret)
mpgmodel <- lm(mpg ~ am + wt, mtcars)
trans <- 1 # 1 = manual, 0 = auto
wt <- 3.5 # in tons
trans <- as.numeric(trans)
mpgpred <- predict(mpgmodel, data.frame(am = trans, wt = wt), interval = "prediction")
mpgpred
class(mpgpred)
?predict
mpgpred$fit
mpgpred[1]
library(ggplot2)
?geom_smooth
mpgpred
?predict
runApp()
runApp()
runApp()
runApp()
runApp()
library(devtools)
install.packages("Rtools")
install.packages("devtools")
install.packages("devtools")
devtools::install_github('rstudio/shinyapps')
shinyapps::setAccountInfo(name='tfell2001', token='223E56C81FE16B4DE1588D4970810B28', secret='db05RrfVemxapr9nsJ9/DbSqyauCTXxsAmUVo0mB')
runApp()
library(shiny)
getwd()
runApp()
deployApp()
library(shinyapps)
deployApp()
?deployApp
